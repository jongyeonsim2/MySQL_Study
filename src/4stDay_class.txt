1. VIEW 사용 목적
   - 데이터 보안
   - Select sql을 좀 더 쉽게 사용하기 위함.
     재사용성, 유지보수성
   - 복잡성을 낮추기 위함

2. View 생성 방법
   create view view_name ( col1, col2... ) as
   select ( col1, col2... ) from table_name;

3. table, View 에 대한 사용 권한 제어
   - 현재는 root 유저를 사용 중임.
   - customer_v 생성후에 
     예를 들어서 데이베이스 사용자를  marketing user,
          insa user, other user 생성.
     other user : customer_v 사용하게 끔함.
                  기존에 customer table 의 select 권한 회수.

4. 갱신 가능한 뷰의 작성 기준
   p.325 참조

   갱신이 가능하다 => update 를 지칭.
                     update가 되는 것을 확인하더라도,
                     insert 가 되는것을 보장하는 건 아님.

   insert 가 되는 view 를 작성하려면,
   p.325 의 조건에 추가적인 조건이 필요함.

   추가적인 조건이라 함은 제약 조건이 만족되어야 함.
   null 제약 조건에서 not null 에 해당하는 칼럼은 반드시
   view 에 있어야 함.

   현재의 customer_v 는 null 제약 조건에 해당하는 모든 칼럼이
   없는 상태임. => insert 가 되지 않음.


5. insert, update, delete 사용법
    
  insert into table_name( col1, col2.... )
  values ( 값1, 값2 .... );

  update table_name
     set col1 = 값1,
         col2 = 값2
   where col3 = 값;

  update시 where 조건이 없으면, 대상 테이블의 전체 데이터가 대상됨.

  delte from table_name
   where col1 = 값;

  delete시 where 조건이 없으면, 대상 테이블의 전체 데이터가 대상됨.

  insert, update, delete  를 수행 후 정상이면, 트랜잭션 종료.( commit )
                                    비정상이면, 트랜잭션 종료.( rollback )

  현재의 mysql은 auto commit 상태임으로, 명시적으로 트랜잭션관리를 
  하지 않고 있음.

  트랜잭션(transaction) : 비즈니스 레벨의 업무 처리 단위.
  어떤 업무가 처리되기 위해서 여러 개의 sql이 복합적으로 실행 되는 경우.


  트랜잭션 #1

  start transaction -> 
  select -> update -> insert -> delete -> commit or rollback ( A 사용자 )

  트랜잭션 하나, 업무 처리의 단위.

  트랜잭션 #2

  start transaction -> 
  select -> update -> insert -> delete -> commit or rollback ( B 사용자 )

  트랜잭션 하나, 업무 처리의 단위.


  6. 제약조건
     - 기본키 제약조건
       primary key : 해당 테이블에서 row를 식별하는 식별자.
                     유일(unique), not null

       두 개의 칼럼으로 pk 를 구성하는 경우 : 복합키
     - 외래키 제약조건
       foreign key : 다른 테이블의 기본키의 값을 참조.
                    다른 테이블의 기본키가 아닌 값을 참조는 할 수 없음.
                    insert(추가), update(변경) 시
                    다른 테이블의 기본키의 값이 아닌 값으로 추가 및 변경은
                    안됨.
     - 고유 제약 조건
       unique key : PK는 아니지만, 해당 칼럼의 값이 유일(unique)해야 함.
     - 체크 제약 조건
       해당 칼럼의 값은 지정된 값만 가능.


     create table customer (
        customer_id smallint ussigned not null auto_increment,
        ......,
        primary key(customer_id), /*기본키 제약조건*/

        /*외래키 제약조건*/
        constraint fk_customer_address foreign key (address_id)
          references address (address_id) on delete restrict 
                                          on update cascade,

        on delete restrict
           : 부모(address) 에서 row 삭제시, 삭제 되는 row의 address_id 가
             자식(customer) 에서 참조(사용)되고 있는 상태이면,
             부모(address)의 row 데이터를 삭제할 수 없음. 에러 발생.

             고아 데이터가 발생하지 않도록 하기 위함.

        on update cascade
           : 부모(address) 에서 row 수정시, 수정되는 row의 address_id 가
             자식(customer) 에서 참조(사용)되고 있는 상태이면,
             자식과 함께 수정이 됨.

         transaction : row level transaction 관리를 위해서 제공되는
             데이터베이스 엔진을 사용. InnoDB 를 사용.
     )

7. 자료형
   - float(p, s) 
     p 는 정밀도, s 는 척도.

     어떤 칼럼의 자료형을 float(4,2) 의 부동소수점으로 지정.
     insert 시, 27.44 정상적으로 insert가 되지만,
     17.8675 로 insert 하는 경우는 17.87 로 반올림이 되어 insert 됨.

     insert 시 178.375 인 경우는 오류가 발생.

8. transaction ( p.287 참조 )
   8.1 잠금
      - 쓰기 잠금 : insert, update, delete
                   내가 수정하고 있는 데이터가 완료되지 않았는데,
                   다른 누군가에 의해서 변경이 되면 안됨.

                   나만 쓰기 위해서 다른 사람의 쓰기를 잠금함.

                   다른 사람들은 쓰기 잠금이 해제가 될 때까지 기다려야 함.
      - 읽기 잠금 : select
                   내가 읽고 데이터가 수정이되어 변경이 되면 안됨.

                   나만 변경없이 읽기 위해서 다른 사람의 변경을 막기 위해서
                   읽기 자금함.

                   다른 사람들은 읽기 잠금이 해제가 될 때까지 기다려야 함.

   8.2 잠금 단위
      - 테이블 잠금, 페이지 잠금, 행 잠금
      - 행(row) 단위로 데이에 접근, 수정함으로 잠금 단위를 행 단위로 해야 함.
        그래서, 데이터 베이스 생성시, 데이터 베이스 엔진을 지정.
        InnoDB 데이터베이스 엔진을 사용함.
      - 테이블의 사용되고 있는 DB 엔진 확인
        show table status like 'customer';

   8.3 세션과 읽기 일관성
      - 세션
        데이터베이스에서 어떤 활동을 위한 시간이나 기간.
        MySql에서의 세션은 데이터베이스 접속을 시작으로 여러 데이터베이스에서
        관련 작업을 수행한 후 접속을 종료하기까지 전체 기간.

        세션은 트랜잭션보다 큰 범위의 개념임.

      - 읽기 일관성
        어떤 특정 세션에서 테이블의 데이터를 변경 중일 때 그 외 다른 세션에서
        는 데이터의 변경이 확정되기 전까지 변경 사항을 알 필요가 없으므로,
        데이터를 변경 중인 세션을 제외한 나머지 세션에서는 현재 진행 중인
        변경과 무관한 본래의 데이터를 보여주는 특성임.

        start transaction을 한 후 데이터 변경을 발생 시킨 후
        commit, rollback 을 하지 않은 상태에서 
        start transaction (새로운 트랜잭션이 시작)되면,
        이전의 트랜잭션에 대해서 commit 이 됨.

      - LOCK(잠금)
        특정 세션에서 조작중인 데이터는 트랜잭션이 완료(commit, rollback, 
        start transaction 등) 되기 전까지 다른 세션에서 조작할 수 없는
        상태가 됨. 즉, 데이터가 잠기게 되는 것임.

        row level : 읽기 일관성 + row level lock

           update dept
              set dname = '111111'
            where deptno = 50; /* 부서번호가 50번인 데이터만 => 한 행 */

           => 트랜잭션의 크기도 설계시 고려의 대상임.
           => 네트워크의 속도에 따라 트랜잭션의 성능에 영향이 될 수 있음.
           => 동시접속자수도 고려해야 함.
           => 웹 서버와 DB 서버를 종합적으로 고려해야 함.
           => 클라우드에서 부하테스트 후 운영할 서버의 한계점을 파악.
           
        table level : 읽기 일관성 + row level lock + 교착 상태
           session A : table lock ( 해당 테이블 모든 )
                update dept
                   set dname = '111111'; 
                   ( 조건절이 없음. 모든 행이 대상. => table lock )
           session B 
                update dept
                   set loc = 'busan'
                 where deptno = 50; 
                   ( 트랜잭션이 완료되기 전까지는 row level lock
                     트랜잭션이 완료되기 전까지 약 10분 정도 대기.
                     => mysql 서버에서 교착상태라고 판단을 하고, 
                        rollback 시킴.
                    )
           session C 
                update dept
                   set loc = 'busan'
                 where deptno = 40; 
                   ( 트랜잭션이 완료되기 전까지는 row level lock )

      - 교착상태( deadlock )
        두 개의 서로 다른 세션에서 트랜잭션이 진행중일 때,
        다른 세션에서 트랜잭션이 해당 리소스를 대기할 때 발생.

        서버에서 감시를 한 후, 일정 시간이 지나면, 
        ( Lock wait timeout exceeded ), rollback 시킴.

   8.4 세이브포인트
        트랜잭션 내에 하나 이상의 세이브포인트를 설정.
        이를 사용해서 트랜잭션의 특정 위치로 롤백할 수 있음.
