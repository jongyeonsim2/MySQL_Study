1. procedure 실습용 테이블

CREATE TABLE userTbl -- 회원 테이블
( userID  	VARCHAR(8) NOT NULL PRIMARY KEY, -- 사용자아이디
  name    	VARCHAR(10) NOT NULL, -- 이름
  birthYear INT NOT NULL,  -- 출생년도
  addr	  	VARCHAR(2) NOT NULL, -- 지역(경기,서울,경남 식으로 2글자만입력)
  mobile1	VARCHAR(3), -- 휴대폰의 국번(011, 016, 017, 018, 019, 010 등)
  mobile2	VARCHAR(8), -- 휴대폰의 나머지 전화번호(하이픈제외)
  height    	SMALLINT,  -- 키
  mDate    	DATE  -- 회원 가입일
);

CREATE TABLE buyTbl -- 회원 구매 테이블
(  num 		INT AUTO_INCREMENT NOT NULL PRIMARY KEY, -- 순번(PK)
   userID  	VARCHAR(8) NOT NULL, -- 아이디(FK)
   prodName 	VARCHAR(6) NOT NULL, --  물품명
   groupName 	VARCHAR(4)  , -- 분류
   price     	INT  NOT NULL, -- 단가
   amount    	SMALLINT  NOT NULL, -- 수량
   FOREIGN KEY (userID) REFERENCES userTbl(userID)
);

INSERT INTO userTbl VALUES('LSG', '이승기', 1987, '서울', '010', '1111111', 182, '2008-8-8');
INSERT INTO userTbl VALUES('KBS', '김범수', 1979, '경남', '010', '2222222', 173, '2012-4-4');
INSERT INTO userTbl VALUES('KKH', '김경호', 1971, '전남', '010', '3333333', 177, '2007-7-7');
INSERT INTO userTbl VALUES('JYP', '조용필', 1950, '경기', '010', '4444444', 166, '2009-4-4');
INSERT INTO userTbl VALUES('SSK', '성시경', 1979, '서울', NULL  , NULL      , 186, '2013-12-12');
INSERT INTO userTbl VALUES('LJB', '임재범', 1963, '서울', '010', '6666666', 182, '2009-9-9');
INSERT INTO userTbl VALUES('YJS', '윤종신', 1969, '경남', 010  , NULL      , 170, '2005-5-5');
INSERT INTO userTbl VALUES('EJW', '은지원', 1972, '경북', '010', '8888888', 174, '2014-3-3');
INSERT INTO userTbl VALUES('JKW', '조관우', 1965, '경기', '010', '9999999', 172, '2010-10-10');
INSERT INTO userTbl VALUES('BBK', '바비킴', 1973, '서울', '010', '0000000', 176, '2013-5-5');

INSERT INTO buyTbl VALUES(NULL, 'KBS', '운동화', NULL   , 30,   2);
INSERT INTO buyTbl VALUES(NULL, 'KBS', '노트북', '전자', 1000, 1);
INSERT INTO buyTbl VALUES(NULL, 'JYP', '모니터', '전자', 200,  1);
INSERT INTO buyTbl VALUES(NULL, 'BBK', '모니터', '전자', 200,  5);
INSERT INTO buyTbl VALUES(NULL, 'KBS', '청바지', '의류', 50,   3);
INSERT INTO buyTbl VALUES(NULL, 'BBK', '메모리', '전자', 80,  10);
INSERT INTO buyTbl VALUES(NULL, 'SSK', '책'    , '서적', 15,   5);
INSERT INTO buyTbl VALUES(NULL, 'EJW', '책'    , '서적', 15,   2);
INSERT INTO buyTbl VALUES(NULL, 'EJW', '청바지', '의류', 50,   1);
INSERT INTO buyTbl VALUES(NULL, 'BBK', '운동화', NULL   , 30,   2);
INSERT INTO buyTbl VALUES(NULL, 'EJW', '책'    , '서적', 15,   1);
INSERT INTO buyTbl VALUES(NULL, 'BBK', '운동화', NULL   , 30,   2);


2. 스토어드 프로시저
   2.1 개요
        - 쿼리문의 집합으로 어떠한 동작을 처리하기 위한 용도로 사용됨.
        - 재사용, 모듈화 개발을 위해서 많이 사용됨.

   2.2 특징
        - Mysql 의 성능을 향상시킬 수 있음.
          몇 백 라인의 sql 문장인 문자열을 네트워크를 경유해서 Mysql 서버로 전송을 하면,
          네트워크의 부하가 발생. 서버도 수신된 SQL 문자을 검사를 하게 됨.

          이러한 기능을 하는 sql을 쿼리문 집합으로 만들어서 스토어드 프로시저라는 객체로
          사용을 하게 되면, 문자열 전송이 없어지고, 장문의 SQL 문자을 검사할 필요가 
          없음. 따라서, 네트워크 부하와 서버의 성능이 높아지게 됨.

        - 유지관가 간편해짐.
          백엔드에서 JAVA 와 관련된 부분에 SQL 문장이 없어지고, 대신에
          스토어드 프로시저를 호출해서 사용하게 됨. 따라서, 함수처럼 호출해서 사용.

          현재 JAVA 의 백엔드 단에 sql 작성해서 운영중인데, sql 문장에 칼럼 추가,
          where 문장을 수정해야 함. => 수정, 테스트, 빌드, 배포 가 발생하게 됨.

          스토어드 프로시저를 사용하게 되면, JAVA 단에서 크게 수정할 부분이 없어짐.
          MYSQL의 스토어드 프로시저 내의 SQL 문장을 수정하면 됨.

        - 모듈식 프로그래밍이 가능해짐.
          함수처럼 사용할 수 있기 때문에, 다른 프로시저에서도 호출해서 사용 가능.

        - 보안을 강화할 수 있음.
          table에 직접 select 하는 것은 경우에 따라서 보안에 좋지 않음.
          그래서, view 를 만들어서 사용하는것으로 함.

          스토어드 프로시저를 이용해서 권한에 맞게끔 select 문장을 작성해두면 됨.

   2.3 형식
        delimiter $$
        create procedure 프로시저 명 ( 매개변수 )
        begin
          SQL 및 반복문 및 제어문 
          sql 1번 문장; 
          sql 2번 문장; 
          sql 3번 문장;
        end $$
        delimiter ;

        call 프로시저 명 ( 매개변수 );

   2.4 매개변수
       in  : 입력 매개변수  
       out : 출력 매개변수

       call proTest(10, @retutnVal);
       // 10 : 입력 매개변수
       // @retutnVal : 출력 매개변수

       select @retutnVal;

   2.5 스토어드 프로시저 실습

      2.5.1 매개변수가 없는 프로시저

drop procedure if exists userProc; //기존 프로시저의 수정이 필요해서
                                  // 기존 프로시저를 먼저 삭제를 해야하는 경우.

delimiter $$                       // SQL 문장의 끝을 지시하는 문자
                                   // 지금 작성중인 프로시저의 컴파일이 끝날 때 까지는
                                   // 기존의 ;  대신에 $$  로 사용하겠다는 의미.

create procedure userProc()        // procedere 가 시작되는 부분.
begin
	select * from userTbl;
end $$                            // $$ 만나면, 여기서 프로시저가 끝나는 것을 
                                  // 알려주는 것과 동일.


delimiter ;                      // 기존에 사용하는 지시문자( ; )로 변경. 

call userProc();                 // 프로시저가 정상적으로 컴파일이 되면,
                                  // mysql 서버에 객체로 등록이 되고,
                                  // 이제부터 스토어드 프로시저를 호출해서 사용할 수 있음.




      2.5.2 in 매개변수가 있는 프로시저

drop procedure if exists userProc1;
delimiter $$
create procedure userProc1( in userName varchar(10) )
begin
  select * from userTbl where name = userName;
end $$
delimiter ;

call userProc1('조관우');






drop procedure if exists userProc2;
delimiter $$
create procedure userProc2( 
	in userBirth int,
    in userHeight int
 )
begin
  select * from usertbl
   where birthYear > userBirth and height > userHeight;
end $$
delimiter ;

call userProc2(1970, 178);




      2.5.3 in, out 매개변수가 있는 프로시저

drop procedure if exists userProc3;
delimiter $$
create procedure userProc3( 
	in textValue char(10),
    out outValue int
 )
begin
  insert into testTBL values(null, textValue);
  select max(id) into outValue from testTBL;
end $$
delimiter ;

create table if not exists testTBL (
	id int auto_increment primary key,
    txt char(10)
);

call userProc3('테스트값', @outValue);
select @outValue;







      2.5.3 in 매개변수, IF 문이 있는 프로시저

drop procedure if exists ifelseProc;
delimiter $$
create procedure ifelseProc( 
	in userName varchar(10)
 )
begin
  declare address char(2);  -- 변수 선언
  
  select addr into address from userTbl
   where name = userName;
   
   if (address = '서울' or address = '경기') then
		select '수도권 거주';
   else
		select '지방 거주';
   end if;
end $$
delimiter ;


call ifelseProc('이승기');
call ifelseProc('김경호');





      2.5.4 in 매개변수, case when 문이 있는 프로시저

drop procedure if exists caseProc;
delimiter $$
create procedure caseProc( 
	in userName varchar(10)
 )
begin
  declare bYear int;  -- 변수 선언
  declare tti char(3);

  select birthYear into bYear from userTbl
   where name = userName;
   
   case
		when ( bYear%12 = 0 ) then set tti = '원숭이';
        when ( bYear%12 = 1 ) then set tti = '닭';
        when ( bYear%12 = 2 ) then set tti = '개';
        when ( bYear%12 = 3 ) then set tti = '돼지';
        when ( bYear%12 = 4 ) then set tti = '쥐';
        when ( bYear%12 = 5 ) then set tti = '소';
        when ( bYear%12 = 6 ) then set tti = '호랑이';
        when ( bYear%12 = 7 ) then set tti = '토끼';
        when ( bYear%12 = 8 ) then set tti = '용';
        when ( bYear%12 = 9 ) then set tti = '뱀';
        when ( bYear%12 = 10 ) then set tti = '말';
        ELSE set tti = '양';
   end case;
   
   select concat(userName, ' 의 띠 ==>', tti);
   
end $$
delimiter ;


call caseProc('이승기');





      2.5.5 반복문이 있는 프로시저


      2 X 1 = 2 ..... 2 X 9 = 18
      3 X 1 = 3 ..... 3 X 9 = 27
      .....
      9 X 1 = 9 ..... 9 X 9 = 81


create table gugudanTBL ( txt varchar(100) );

drop procedure if exists gugudanProc;
delimiter $$
create procedure gugudanProc()
begin
    declare str varchar(100); -- 구구단 결과 식 ( 2 X 1 = 2 )
	declare i int;
    declare k int;
    set i = 2; -- 2 단부터 시작.
    
    while ( i < 10) do -- 2 ~ 9 단 반복
		set str = '';
        set k = 1;
        while ( k < 10) do
			set str = concat( str, ' ', i, 'X', k, '=', i*k );
            set k = k + 1;
        end while;
        set i = i + 1;
        insert into gugudanTBL values(str);
    end while;
end $$
delimiter ;

call gugudanProc();

select * from gugudanTBL;






      2.5.6 동적SQL이 있는 프로시저
            상황에 따라 내용 변경이 실시간으로 필요한 경우에
            동적SQL을 사용하여, 실시간으로 실행해서 사용.

drop procedure if exists dynamicSqlProc;
delimiter $$
create procedure dynamicSqlProc(
	in tblName varchar(20) -- 테이블 명
)
begin
    -- from 절 다음에 반드시 공백이 필요함. 테이블과의 구분을 위함.
	set @sqlQuery = concat('select * from ', tblName);
    
    prepare myQuery from @sqlQuery; -- sql 실행하기 위한 준비, 
									-- 테이블 존재 유무, 권한 체크 등
    execute myQuery;
    deallocate prepare statement;
    
end $$
delimiter ;

call dynamicSqlProc('customer');







   2.5 스토어드 function 실습

       - 환경 변수 설정을 해야만 function 작성, 생성, 실행, 수정 이 가능함.
         set global log_bin_trust_function_creators = 1;

         1 or on 으로 설정해서 사용하면 됨.
         default 값은 0 or off 로 설정되어 있음.



/* 두 정수를 매개변수로 받아서 더한 결과값을 반환하는 함수 */
set global log_bin_trust_function_creators = 1;

drop function if exists userFunc1;
delimiter $$
create function userFunc1(val1 int, val2 int)
	returns int
begin
	return val1 + val2;
end $$
delimiter ;
    
select userFunc1(100, 200);





/* 태어난 년도를 매개변수로 받아서, 현재 나이를 계산후 반환하는 함수 */
drop function if exists getAgeFunc;
delimiter $$
create function getAgeFunc(bYear int)
	returns int
begin
	declare age int;
	set age = year(curdate()) - bYear;
	return age;
end $$
delimiter ;

select getAgeFunc(2000);


select userId, name, getAgeFunc(birthYear) as '현재 나이'
  from userTbl;







   2.5 커서 procedure 실습

       2.5.1 개요
           테이블에서 여러 개의 행을 쿼리한 후에 퀴리의 결과인 행 집합에서
          한 생씩 처리 하기 위한 방식임.

       2.5.2 처리 단계
          커서 declare -> 커서 open -> 커서 fetch -> 커서 close
          커서 fetch : 가져온 한 row에서 대해 데이터 처리를 수행.

       2.5.3 실습

       /* 실습 내용
       
          고객 정보 테이블에 고객 등급 칼럼을 추가 후 등급 관리를 하려고 함
       
          대량의 고객 정보를 업데이트 하기위한 프로시저용임.

          10만명의 고객에 대한 한 명 한 명의 등급 계산이 필요함.
          그래서, 한 row 를 대상으로 반복 작업을 해야하는 경우, 
          cursor 를 사용하면 편리함.
       */


alter table userTbl add grade varchar(5);
    
drop procedure if exists gradeProc;
delimiter $$
create procedure gradeProc()
begin
	declare id varchar(10); -- 사용자 ID
    declare sumOfAmount bigint; -- 총 구매 금액
    declare userGrade char(5);
    
    -- 커서의 제어를 위한 변수 설정. 커서의 끝인지에 대한 여부에 따라 처리를 구분.
    declare endOfRow boolean default false;
    
    -- 커서 선언
    declare userCursor cursor for
		select u.userid, sum(price*amount)
		  from buyTbl b
			right outer join userTbl u
			on b.userid = u.userid
		  group by u.userid, u.name;

    -- 커서의 핸들링 제어 설정
    declare continue handler
		for not found set endOfRow = true; -- 커서의 끝이면, 
        
	-- 커서의 open
    open userCursor;
    
    -- 반복문에 이름을 설정해서 반복문을 작성.
    grade_loop: loop
		
        -- 커서에서 한 row 씩 가져옴.
        fetch userCursor into id, sumOfAmount;
        
        if endOfRow then
			leave grade_loop;
		end if;
        
        case
			when (sumOfAmount >= 1500) then set userGrade = '최우수고객';
            when (sumOfAmount >= 1000) then set userGrade = '우수고객';
            when (sumOfAmount >= 1) then set userGrade = '일반고객';
            else set userGrade = '유령고객';
		end case;
            
        update userTbl set grade = userGrade where userId = id;
    end loop grade_loop;

end $$
delimiter ;


call gradeProc();

select * from userTbl;






3. 트리거( Trigger )
   3.1 개요
       테이블에 삽입(insert), 수정(update), 삭제(delete) 등의 작업(이벤트) 가 발생할 때
       자동으로 작동되는 개체임.

       테이블에 부작되는 이벤트 기반의 프로그램 코드라고 생각하면 됨.

   3.2 대표적 용도
       - 백업용
         어떤 테이블에서 row를 삭제(delete)할 경우, 삭제되는 데이터를 어딘가에 백업을 받아야 함.
         delete -> 백업 table에 insert => 트리거라는 것에 백업 동작이 실행되도록 작성.

       - 모니터링
         인사 테이블에서 데이터가 수정(update)이 되면, 투가 수정했는지의 정보를 기록.

       - 비즈니스 프로세스 단계 처리용
         쇼핑몰에서 구입, 재고, 배송은 하나의 비즈니스 프로세스임.

         고객이 쇼핑몰에서 물건을 구입 -> 구입 table에 데이터가 insert ->
         -> 재고 테이블에서 고객이 구매한 수량만큼 차감(update) ->
         -> 배송 테이블에 데이터가 insert 

         insert -> update -> insert ( sql 문장이 3개 ) 대신에
         트리거로 처리가 가능함.( 다중 트리거 )

   3.3 형식
       - trigger time : 이벤트(insert, update, delete) 발생 전
                        이벤트(insert, update, delete) 발생 후
       - trigger event : insert, update, delete
       - event 전후 데이터 지시자 : old( event 전 ), new( event 후 )


   3.4 실습

/* 실습용 table */
/* 백업 및 모니터링용 */
CREATE TABLE backup_userTbl
( userID  char(8) NOT NULL PRIMARY KEY, 
  name    varchar(10) NOT NULL, 
  birthYear   int NOT NULL,  
  addr	  char(2) NOT NULL, 
  mobile1	char(3), 
  mobile2   char(8), 
  height    smallint,  
  mDate    date,
  modType  char(2), -- 변경된 타입. '수정' 또는 '삭제'
  modDate  date, -- 변경된 날짜
  modUser  varchar(256) -- 변경한 사용자
);


/* 비즈니스 프로세스 단계 처리용 */
CREATE TABLE orderTbl -- 구매 테이블
	(orderNo INT AUTO_INCREMENT PRIMARY KEY, -- 구매 일련번호
          userID VARCHAR(5), -- 구매한 회원아이디
	 prodName VARCHAR(5), -- 구매한 물건
	 orderamount INT );  -- 구매한 개수

CREATE TABLE prodTbl -- 물품 테이블
	( prodName VARCHAR(5), -- 물건 이름
	  account INT ); -- 남은 물건수량
      
CREATE TABLE deliverTbl -- 배송 테이블
	( deliverNo  INT AUTO_INCREMENT PRIMARY KEY, -- 배송 일련번호
	  prodName VARCHAR(5), -- 배송할 물건		  
	  account INT UNIQUE); -- 배송할 물건개수




/* 고객 정보 수정시 백업 및 모니터링용 트리거
   update event
 */
 drop trigger if exists backUserTbl_UpTrg;
 delimiter $$
 create trigger backUserTbl_UpTrg
   after update  -- update 가 된 후 동작을 지정.
   on userTbl    -- trigger 가 부착될 대상 table
   for each row  -- 모든 row 대상
begin
	-- 백업용임으로 update 전의 데이터를 백업.
	insert into backup_userTbl 
    values ( old.userId, old.name, old.birthYear,
		old.addr, old.mobile1, old.mobile2, old.height,
        old.mDate, '수정', curdate(), current_user() );
end $$
delimiter ;

show triggers from sakila;




 /* 고객 정보 삭제시 백업 및 모니터링용 트리거
   delete event
 */
 drop trigger if exists backUserTbl_DelTrg;
 delimiter $$
 create trigger backUserTbl_DelTrg
   after delete  -- update 가 된 후 동작을 지정.
   on userTbl    -- trigger 가 부착될 대상 table
   for each row  -- 모든 row 대상
begin
	-- 백업용임으로 update 전의 데이터를 백업.
	insert into backup_userTbl 
    values ( old.userId, old.name, old.birthYear,
		old.addr, old.mobile1, old.mobile2, old.height,
        old.mDate, '삭제', curdate(), current_user() );
end $$
delimiter ;

show triggers from sakila;





  /* 고객 정보 신규 등록시 에러 발생 트리거
   insert event
 */
 drop trigger if exists backUserTbl_InsertTrg_err;
 delimiter $$
 create trigger backUserTbl_InsertTrg_err
   after insert  -- update 가 된 후 동작을 지정.
   on userTbl    -- trigger 가 부착될 대상 table
   for each row  -- 모든 row 대상
begin
    -- 에러 발생 및 메세지 출력
	signal sqlstate '45000'
		set message_text = '데이터가 입력됨. 서버에 기록됨.';
end $$
delimiter ;


show triggers from sakila;


insert into userTbl 
values('AAB', 'AAB', 2004, 'AA', '010', '11111111', 170,
		'2019-12-01', '유령고객');
        
/*
14:46:18	insert into userTbl  values('AAB', 'AAB', 2004, 'AA', '010', '11111111', 170,   '2019-12-01', '유령고객')	
Error Code: 1644. 데이터가 입력됨. 서버에 기록됨.	0.000 sec
*/






  /* 고객 정보 신규 등록시 태어난 연도 validation 용 트리거
   insert event
 */

-- 기존의 insert trigger 먼저 삭제해야 함.
drop trigger backUserTbl_InsertTrg_err;

drop trigger if exists backUserTbl_InsertTrg;
 delimiter $$
 create trigger backUserTbl_InsertTrg
   before insert  -- insert 되기 전 동작을 지정.
   on userTbl    -- trigger 가 부착될 대상 table
   for each row  -- 모든 row 대상
begin
    -- 태어난 연도 validation check
    if new.birthYear < 1900 then
		set new.birthYear = 0;
    elseif new.birthYear > year(curdate()) then
		set new.birthYear = year(curdate());
    end if;
end $$
delimiter ;

show triggers from sakila;

insert into userTbl 
values('ABB', 'ABB', 1800, 'AA', '010', '11111111', 170,
		'2019-12-01', '유령고객');
        
select * from userTbl where userId = 'ABB';






/* 비즈니스 프로세스 단계 처리용 

orderTbl( insert 발생 )  :  재고 테이블에서 수량 차감.(prodTbl 에서 update 가 발생.)
-> prodTbl( update 발생 )  : 배송 테이블에 배송 시작을 위해서 데이터 등록 ( deliverTbl에서 insert 가 발생.)
-> deliverTbl

insert -> update -> insert 

*/

-- 재고 테이블에 테스트용 데이터 등록
insert into prodTbl values('사과', 100);
insert into prodTbl values('배', 100);
insert into prodTbl values('귤', 100);


 drop trigger if exists orderTrg;
 delimiter $$
 create trigger orderTrg
   after insert  -- insert 되기 전 동작을 지정.
   on orderTbl    -- trigger 가 부착될 대상 table
   for each row  -- 모든 row 대상
begin
    -- 재고 테이블에서 수량 차감(update)
    -- new.orderamount : orderTbl 칼럼
    update prodTbl set account = account - new.orderamount
     where prodName = new.prodname;
end $$
delimiter ;

show triggers from sakila;









 drop trigger if exists prodTrg;
 delimiter $$
 create trigger prodTrg
   after update  -- insert 되기 전 동작을 지정.
   on prodTbl    -- trigger 가 부착될 대상 table
   for each row  -- 모든 row 대상
begin
    -- 배송 시작을 위해서 배송 테이블에 데이터 등록 ( insert )
    -- 배송 수량 계산 필요
    declare orderAmount int;
    
    set orderAmount = old.account - new.account;
    
    insert into deliverTbl(prodName, account)
    values(new.prodName, orderAmount);
end $$
delimiter ;

show triggers from sakila;







-- 주문 테이블에 test 용 데이터 등록
select * from orderTbl;
select * from prodTbl;
select * from deliverTbl;

insert into orderTbl values (null, 'cus1', '배', 5);






