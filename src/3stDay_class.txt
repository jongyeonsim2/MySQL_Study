
1. 상관 서브쿼리
   메인 쿼리에서 사용한 data를 sub query에서 사용하고
   sub query의 결과값을 다시 main query로 반환하는 방식.

   - customer table에 등록된 고객수 : 599 건
   - sub query 에서 c.customer_id 는 customer table 에서 가져와야 함.
   - customer table 에서 599건 중에서 customer_id 한 건씩 가져와서
     sub query 의 조건으로 사용. 

     => sub query 가 599 번 실행한 것임.
     => 성능이 좋지 않으 수 도 있음.
   - sub query 의 결과를 다시 main query 로 반환해서,
     main query 의 where 절의 조건과 비교를 해야 함.

select c.first_name, c.last_name
from customer c
where 20 =    /* Main query, 포함 쿼리 */
(  /* sub query */
	select count(*) from rental r
	 where r.customer_id = c.customer_id
);

   1.1 exists 연산자
       - 상관 서브쿼리에서 자주 사용되는 연산자임.
       - 조건에 해당되는 데이터가 존재하는지를 확인하는 용도.

   1.2 데이터 구성( p.243 )
        표 9-1. 고객 지불 그룹

        DVD 대여 시스템을 위한 DB 를 사용 중임.
        고객 실적에 대해서 세분화한 화면을 개발 중임.
        고객의 대여 실적을 기준으로 고객 등급의 분류가 필요함을 느낌.

        ERD 를 확인해보니, 고객 등급 관리용 table 이 없다는 것을 알게됨.
        table을 생성하고 싶은데, 안되다는 것으로 결정됨.

        sql 을 이용해서 고객 등급 관리용 table 처럼 만들어서 사용 해야 함.

        표 9-1. 고객 지불 그룹 에 대한 정리된 기준을 고객이 전달해 줌.


   1.3 태스크 지향 sub query( p.245, p.246 )

       p.245 sql : 조인 후 그룹핑
                   그룹핑 대상 : 3개의 칼럼이 대상 : 문자열

       p.246 sql : 그룹핑 후 조인
                   그룹핑 대상 : 1개의 칼럼이 대상 : 정수형

                   => 성능이 좋음

   1.4 p.247
       공통 테이블 표현식( CTE, Common Table Expression )
      - 서브 쿼리가 몇 십, 몇 백줄 이상을 넘나드는 규모가 
        되었을 경우, 실제 수행해야 하는 main query와 
        sub query를 분류할 때 유용함.
      - main query 와 sub query 가 구분되고, 가독성이 높아짐.
        재사용성과 유지보수성이 높아짐.
      - with 절 을 사용.
        with
          [별칭1] as (select 문1),
          [별칭2] as (select 문2),
          .....
          [별칭n] as (select 문n)
          select
            from 별칭1, 별칭2, .... 별칭n    main query
              

   1.5 p.249
       스칼라 서브쿼리
       - select 절에서 사용되는 sub query
       - select 절에 하나의 열(칼럼)로 사용할 수 있음.
       - 주의할 점
         반드시 하나의 결과와 열만 반환되도록 작성해야 함.
         
   1.6 외부조인(Outer Join)
       - 두 테이블 간 조인 수행에서 조인 열의 어느 한 쪽이 null 이어도
         강제로 출력하는 join 방식.

       - 왼쪽 외부 조인(Left Outer Join)
         왼쪽 열을 기준으로 오른쪽 열의 데이터 존재 여부에 상관없이 출력하라는 의미.

select e1.empno, e1.ename, e1.mgr -- 기존 emp 그대로 사용
       ,e2.empno as mgr_emono, e2.ename as mgr_ename
  from emp e1 left outer join emp e2 -- e2는 관지자 table로 생각.
   on ( e1.mgr = e2.empno );

         King(사장님) 은 e1.mgr 이 null 로서, e2.emono 와 일치하는 데이터가 없음에도
         출력하라는 의미.

       - 오른쪽 외부 조인(Right Outer Join)
         오른쪽 열을 기준으로 왼쪽 열의 데이터 존재 여부에 상관없이 출력하라는 의미.

select e1.empno, e1.ename, e1.mgr,
	   e2.empno as mgr_empno, e2.ename as mgr_ename
  from emp e1 right outer join emp e2 
  on ( e1.mgr = e2.empno )
  order by e1.empno, mgr_empno;

         7369, 7499, 7521, 7654, 7844, 7876, 7900, 7934 해당하는 사번은
         emp.mgr 에 없는 사원임. => 평사원 => 관리자가 아님.

       - emp table 기준.
         null 이라고 하는 대상은 크게 두 가지임.
         사장님, 관리자로 등록이 되지 않은 사원( 관리자가 아님. = 평사원 ).


   1.7 교차 조인( Cross Join )
       - A table row : 5, B table row : 6
         A cross join B 의 결과 row : 30 개의 row임.
       - A table 에서 한 행을 가져온 다음에 B table 의 전체 행과 조인함.
         A table 의 모든 행을 B table 의 모든 행과 join 하는 것.
       - 어떤 회사의 자사 기준의 근무 칼렌다를 직접 만들어서 하는 경우.
       - 교재에서는 2020년도에 일별 DVD 대여 실적을 구하기 위해서
         2020년도 달력을 만들어서 실적을 구함.


       - p.264
           cross join 을 활용해서 0 ~ 399 생성.
           시작하는 날짜 2023년 1월 1일 + (0 ~ 399)

           숫자 한 자리(1단위), 숫자 두 자리(10단위), 숫자 세자리(100단위)

          0 1 2 3 ..... 0 10 20 30 ..... 0 100 200 300.... 열로 생가해야 함.

          select 1단위 + 10단위 + 100 단위

       - p.265
           0 ~ 399 를 이용해서 실제 시작일을 기준으로 더하기를 수행해서 날짜를 구함.

           2020-01-01 + ( 0 ~ 399 ) < 2021-01-01

           2020-01-01 + 0  < 2021-01-01                  true
           2020-01-01 + 1 ( 2020-01-02 )  < 2021-01-01   true
              .......
           2020-01-01 + 364 ( 2020-12-31 )  < 2021-01-01   true          
              .......
           2020-01-01 + 399 < 2021-01-01       false

           여기까지 하면, 달력이 완성이 됨.

       - p.267
           rental table join

      


   1.8 자연 조인( natural join ) 등가 조인 = inner join
       - inner join 에서는 
         on c.customer_id = r.customer_id
         join 조건을 명시적으로 지정.

         하지만, 자연 조인에서는 서버에서 알아서 join 조건을 지정함.

       - 사용하지 않는 편이 좋음. 
         join 조건 같은 경우를 직접 명시적으로 작성하는게 좋음.


select count(*) from customer; /* 599 */

select count(*) from rental;   /* 16044 */

select count(*)               /* 16044 */
from customer c
inner join rental r
on c.customer_id = r.customer_id; /*  c.customer_id :pk,  r.customer_id : fk  */

select count(*)
  from customer c
 natural join rental r; /* c.customer_id = r.customer_id */
                        /* c.last_date = r.last_date */
 
select * from customer;
select * from rental;
 
select count(*)
  from (
			select customer_id
              from customer
	) cust
 natural join rental r; /* c.customer_id = r.customer_id */